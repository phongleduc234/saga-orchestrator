name: Build and Deploy Saga-orchestrator API

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0

      - name: Add private NuGet source
        run: |
          dotnet nuget add source "${{ secrets.BAGET_URL }}" \
            --name DevOpsNuGet \
            --username user \
            --password "${{ secrets.BAGET_API_KEY }}" \
            --store-password-in-clear-text

      - name: Clean solution
        run: dotnet clean

      - name: Restore dependencies
        run: dotnet restore -v d

      - name: Build and test
        run: |
          dotnet build --no-restore
          dotnet test --no-restore

      - name: Set image tag
        id: set_tag
        run: |
          echo "image_tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        env:
          RELEASE: saga-orchestrator-api
        run: |
          docker build \
            --build-arg BAGET_URL=${{ secrets.BAGET_URL }} \
            --build-arg BAGET_API_KEY=${{ secrets.BAGET_API_KEY }} \
            -t ${{ secrets.DOCKER_USERNAME }}/$RELEASE:${{ steps.set_tag.outputs.image_tag }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/$RELEASE:${{ steps.set_tag.outputs.image_tag }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install cloudflared
        run: |
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/

      - name: Setup SSH key
        run: |
          mkdir -p /tmp/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/.ssh/id_rsa
          chmod 600 /tmp/.ssh/id_rsa

      - name: Configure SSH with ProxyCommand
        run: |
          mkdir -p ~/.ssh
          echo "Host ssh.cuder.xyz
            User phongle
            ProxyCommand cloudflared access ssh --hostname %h
            IdentityFile /tmp/.ssh/id_rsa
            StrictHostKeyChecking no
          " > ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Copy values.yaml to server
        env:
          RELEASE: saga-orchestrator-api
        run: |
          scp ./helm/values.yaml ssh.cuder.xyz:/tmp/$RELEASE-values.yaml

      - name: Apply Kubernetes deployment
        run: |
          ssh ssh.cuder.xyz "
            set -e

            RELEASE=saga-orchestrator-api
            NAMESPACE=devops

            if helm ls -n \$NAMESPACE | grep -q \$RELEASE; then
              echo 'Force deleting stuck pods...'
              kubectl get pods -n \$NAMESPACE -o json | jq -r '.items[] | select(.metadata.deletionTimestamp != null) | .metadata.name' | while read pod; do
                echo Deleting stuck pod: \$pod
                kubectl delete pod \$pod -n \$NAMESPACE --grace-period=0 --force
              done

              echo 'Uninstalling existing Helm release...'
              helm uninstall \$RELEASE -n \$NAMESPACE

              echo 'Waiting for old pods to terminate...'
              while kubectl get pods -n \$NAMESPACE | grep \$RELEASE; do
                sleep 3
              done
            fi

            echo 'Installing Helm chart...'
            helm upgrade --install \$RELEASE devops-charts/dotnet-core-api \
              --namespace \$NAMESPACE --create-namespace \
              -f /tmp/\$RELEASE-values.yaml \
              --set image.repository=${{ secrets.DOCKER_USERNAME }}/\$RELEASE \
              --set image.tag=${{ needs.build.outputs.image_tag }} \
              --set image.pullPolicy=Always
          "
